cmake_minimum_required(VERSION 3.13)

# 1) Tell the SDK we’re targeting the Pico W *before* importing it
set(PICO_BOARD pico_w)

# 2) Point at your local Pico SDK & Extras
set(PICO_SDK_PATH   ${CMAKE_CURRENT_LIST_DIR}/pico-sdk)
set(PICO_EXTRAS_PATH ${CMAKE_CURRENT_LIST_DIR}/pico-extras)

# 3) Now import the SDK (it will see PICO_BOARD=pico_w and enable USB + Wi-Fi)
include(${PICO_SDK_PATH}/external/pico_sdk_import.cmake)
include(${PICO_EXTRAS_PATH}/external/pico_extras_import.cmake)

# 4) Project setup
project(pico_http_server C CXX ASM)
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)
pico_sdk_init()

# 5) Your executable
add_executable(server
    main.c
    src/request.c
    src/response.c
)

# 6) Route all stdio (printf) over USB-CDC, disable UART stdio
pico_enable_stdio_usb(server 1)
pico_enable_stdio_uart(server 0)

# 7) Include your headers
target_include_directories(server PRIVATE
    ${CMAKE_CURRENT_LIST_DIR}
    ${CMAKE_CURRENT_LIST_DIR}/inc
    ${CMAKE_CURRENT_LIST_DIR}/src
)

# 8) Link the poll‐driven raw-API network wrapper
target_link_libraries(server PRIVATE
    pico_stdlib
    pico_cyw43_arch_lwip_poll
)

# 9) Generate UF2 for drag-and-drop flashing
pico_add_extra_outputs(server)
